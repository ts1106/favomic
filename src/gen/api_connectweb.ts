// @generated by protoc-gen-connect-web v0.6.0 with parameter "target=ts"
// @generated from file api.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  Author,
  BatchCreateAuthorsRequest,
  BatchCreateAuthorsResponse,
  BatchCreateComicsRequest,
  BatchCreateComicsResponse,
  BatchCreateEpisodesRequest,
  BatchCreateEpisodesResponse,
  BatchCreateMagazinesRequest,
  BatchCreateMagazinesResponse,
  BatchCreateTagsRequest,
  BatchCreateTagsResponse,
  Comic,
  CreateAuthorRequest,
  CreateComicRequest,
  CreateEpisodeRequest,
  CreateMagazineRequest,
  CreateTagRequest,
  DeleteAuthorRequest,
  DeleteComicRequest,
  DeleteEpisodeRequest,
  DeleteMagazineRequest,
  DeleteTagRequest,
  Episode,
  GetAuthorRequest,
  GetComicRequest,
  GetEpisodeRequest,
  GetMagazineRequest,
  GetTagRequest,
  ListAuthorRequest,
  ListAuthorResponse,
  ListComicRequest,
  ListComicResponse,
  ListEpisodeRequest,
  ListEpisodeResponse,
  ListMagazineRequest,
  ListMagazineResponse,
  ListTagRequest,
  ListTagResponse,
  Magazine,
  SearchAuthorRequest,
  Tag,
  UpdateAuthorRequest,
  UpdateComicRequest,
  UpdateEpisodeRequest,
  UpdateMagazineRequest,
  UpdateTagRequest,
  UpsertAuthorRequest,
  UpsertComicRequest,
  UpsertEpisodeRequest,
  UpsertMagazineRequest,
} from './api_pb';
import { Empty, MethodKind } from '@bufbuild/protobuf';

/**
 * @generated from service api.AuthorService
 */
export const AuthorService = {
  typeName: 'api.AuthorService',
  methods: {
    /**
     * @generated from rpc api.AuthorService.Create
     */
    create: {
      name: 'Create',
      I: CreateAuthorRequest,
      O: Author,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.Get
     */
    get: {
      name: 'Get',
      I: GetAuthorRequest,
      O: Author,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.Update
     */
    update: {
      name: 'Update',
      I: UpdateAuthorRequest,
      O: Author,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.Delete
     */
    delete: {
      name: 'Delete',
      I: DeleteAuthorRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.List
     */
    list: {
      name: 'List',
      I: ListAuthorRequest,
      O: ListAuthorResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.BatchCreate
     */
    batchCreate: {
      name: 'BatchCreate',
      I: BatchCreateAuthorsRequest,
      O: BatchCreateAuthorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.Upsert
     */
    upsert: {
      name: 'Upsert',
      I: UpsertAuthorRequest,
      O: Author,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.AuthorService.Search
     */
    search: {
      name: 'Search',
      I: SearchAuthorRequest,
      O: Author,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service api.ComicService
 */
export const ComicService = {
  typeName: 'api.ComicService',
  methods: {
    /**
     * @generated from rpc api.ComicService.Create
     */
    create: {
      name: 'Create',
      I: CreateComicRequest,
      O: Comic,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.Get
     */
    get: {
      name: 'Get',
      I: GetComicRequest,
      O: Comic,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.Update
     */
    update: {
      name: 'Update',
      I: UpdateComicRequest,
      O: Comic,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.Delete
     */
    delete: {
      name: 'Delete',
      I: DeleteComicRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.List
     */
    list: {
      name: 'List',
      I: ListComicRequest,
      O: ListComicResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.BatchCreate
     */
    batchCreate: {
      name: 'BatchCreate',
      I: BatchCreateComicsRequest,
      O: BatchCreateComicsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.ComicService.Upsert
     */
    upsert: {
      name: 'Upsert',
      I: UpsertComicRequest,
      O: Comic,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service api.EpisodeService
 */
export const EpisodeService = {
  typeName: 'api.EpisodeService',
  methods: {
    /**
     * @generated from rpc api.EpisodeService.Create
     */
    create: {
      name: 'Create',
      I: CreateEpisodeRequest,
      O: Episode,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.Get
     */
    get: {
      name: 'Get',
      I: GetEpisodeRequest,
      O: Episode,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.Update
     */
    update: {
      name: 'Update',
      I: UpdateEpisodeRequest,
      O: Episode,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.Delete
     */
    delete: {
      name: 'Delete',
      I: DeleteEpisodeRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.List
     */
    list: {
      name: 'List',
      I: ListEpisodeRequest,
      O: ListEpisodeResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.BatchCreate
     */
    batchCreate: {
      name: 'BatchCreate',
      I: BatchCreateEpisodesRequest,
      O: BatchCreateEpisodesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.EpisodeService.Upsert
     */
    upsert: {
      name: 'Upsert',
      I: UpsertEpisodeRequest,
      O: Episode,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service api.MagazineService
 */
export const MagazineService = {
  typeName: 'api.MagazineService',
  methods: {
    /**
     * @generated from rpc api.MagazineService.Create
     */
    create: {
      name: 'Create',
      I: CreateMagazineRequest,
      O: Magazine,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.Get
     */
    get: {
      name: 'Get',
      I: GetMagazineRequest,
      O: Magazine,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.Update
     */
    update: {
      name: 'Update',
      I: UpdateMagazineRequest,
      O: Magazine,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.Delete
     */
    delete: {
      name: 'Delete',
      I: DeleteMagazineRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.List
     */
    list: {
      name: 'List',
      I: ListMagazineRequest,
      O: ListMagazineResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.BatchCreate
     */
    batchCreate: {
      name: 'BatchCreate',
      I: BatchCreateMagazinesRequest,
      O: BatchCreateMagazinesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.MagazineService.Upsert
     */
    upsert: {
      name: 'Upsert',
      I: UpsertMagazineRequest,
      O: Magazine,
      kind: MethodKind.Unary,
    },
  },
} as const;

/**
 * @generated from service api.TagService
 */
export const TagService = {
  typeName: 'api.TagService',
  methods: {
    /**
     * @generated from rpc api.TagService.Create
     */
    create: {
      name: 'Create',
      I: CreateTagRequest,
      O: Tag,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.TagService.Get
     */
    get: {
      name: 'Get',
      I: GetTagRequest,
      O: Tag,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.TagService.Update
     */
    update: {
      name: 'Update',
      I: UpdateTagRequest,
      O: Tag,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.TagService.Delete
     */
    delete: {
      name: 'Delete',
      I: DeleteTagRequest,
      O: Empty,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.TagService.List
     */
    list: {
      name: 'List',
      I: ListTagRequest,
      O: ListTagResponse,
      kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc api.TagService.BatchCreate
     */
    batchCreate: {
      name: 'BatchCreate',
      I: BatchCreateTagsRequest,
      O: BatchCreateTagsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const;
