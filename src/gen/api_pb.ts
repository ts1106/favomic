// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file api.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message api.Author
 */
export class Author extends Message<Author> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated api.Comic comics = 3;
   */
  comics: Comic[] = [];

  constructor(data?: PartialMessage<Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.Author";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comics", kind: "message", T: Comic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Author {
    return new Author().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Author {
    return new Author().fromJsonString(jsonString, options);
  }

  static equals(a: Author | PlainMessage<Author> | undefined, b: Author | PlainMessage<Author> | undefined): boolean {
    return proto3.util.equals(Author, a, b);
  }
}

/**
 * @generated from message api.CreateAuthorRequest
 */
export class CreateAuthorRequest extends Message<CreateAuthorRequest> {
  /**
   * @generated from field: api.Author author = 1;
   */
  author?: Author;

  constructor(data?: PartialMessage<CreateAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.CreateAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "message", T: Author },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateAuthorRequest {
    return new CreateAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateAuthorRequest {
    return new CreateAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateAuthorRequest {
    return new CreateAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateAuthorRequest | PlainMessage<CreateAuthorRequest> | undefined, b: CreateAuthorRequest | PlainMessage<CreateAuthorRequest> | undefined): boolean {
    return proto3.util.equals(CreateAuthorRequest, a, b);
  }
}

/**
 * @generated from message api.GetAuthorRequest
 */
export class GetAuthorRequest extends Message<GetAuthorRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: api.GetAuthorRequest.View view = 2;
   */
  view = GetAuthorRequest_View.BASIC;

  constructor(data?: PartialMessage<GetAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.GetAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetAuthorRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAuthorRequest {
    return new GetAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined, b: GetAuthorRequest | PlainMessage<GetAuthorRequest> | undefined): boolean {
    return proto3.util.equals(GetAuthorRequest, a, b);
  }
}

/**
 * @generated from enum api.GetAuthorRequest.View
 */
export enum GetAuthorRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetAuthorRequest_View)
proto3.util.setEnumType(GetAuthorRequest_View, "api.GetAuthorRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.UpdateAuthorRequest
 */
export class UpdateAuthorRequest extends Message<UpdateAuthorRequest> {
  /**
   * @generated from field: api.Author author = 1;
   */
  author?: Author;

  constructor(data?: PartialMessage<UpdateAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpdateAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "message", T: Author },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateAuthorRequest {
    return new UpdateAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateAuthorRequest {
    return new UpdateAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateAuthorRequest {
    return new UpdateAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateAuthorRequest | PlainMessage<UpdateAuthorRequest> | undefined, b: UpdateAuthorRequest | PlainMessage<UpdateAuthorRequest> | undefined): boolean {
    return proto3.util.equals(UpdateAuthorRequest, a, b);
  }
}

/**
 * @generated from message api.DeleteAuthorRequest
 */
export class DeleteAuthorRequest extends Message<DeleteAuthorRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.DeleteAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteAuthorRequest {
    return new DeleteAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteAuthorRequest {
    return new DeleteAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteAuthorRequest {
    return new DeleteAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteAuthorRequest | PlainMessage<DeleteAuthorRequest> | undefined, b: DeleteAuthorRequest | PlainMessage<DeleteAuthorRequest> | undefined): boolean {
    return proto3.util.equals(DeleteAuthorRequest, a, b);
  }
}

/**
 * @generated from message api.ListAuthorRequest
 */
export class ListAuthorRequest extends Message<ListAuthorRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: api.ListAuthorRequest.View view = 3;
   */
  view = ListAuthorRequest_View.BASIC;

  constructor(data?: PartialMessage<ListAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListAuthorRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthorRequest {
    return new ListAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthorRequest {
    return new ListAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthorRequest {
    return new ListAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthorRequest | PlainMessage<ListAuthorRequest> | undefined, b: ListAuthorRequest | PlainMessage<ListAuthorRequest> | undefined): boolean {
    return proto3.util.equals(ListAuthorRequest, a, b);
  }
}

/**
 * @generated from enum api.ListAuthorRequest.View
 */
export enum ListAuthorRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ListAuthorRequest_View)
proto3.util.setEnumType(ListAuthorRequest_View, "api.ListAuthorRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.ListAuthorResponse
 */
export class ListAuthorResponse extends Message<ListAuthorResponse> {
  /**
   * @generated from field: repeated api.Author author_list = 1;
   */
  authorList: Author[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAuthorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListAuthorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author_list", kind: "message", T: Author, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAuthorResponse {
    return new ListAuthorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAuthorResponse {
    return new ListAuthorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAuthorResponse {
    return new ListAuthorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAuthorResponse | PlainMessage<ListAuthorResponse> | undefined, b: ListAuthorResponse | PlainMessage<ListAuthorResponse> | undefined): boolean {
    return proto3.util.equals(ListAuthorResponse, a, b);
  }
}

/**
 * @generated from message api.BatchCreateAuthorsRequest
 */
export class BatchCreateAuthorsRequest extends Message<BatchCreateAuthorsRequest> {
  /**
   * @generated from field: repeated api.CreateAuthorRequest requests = 1;
   */
  requests: CreateAuthorRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateAuthorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateAuthorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateAuthorRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateAuthorsRequest {
    return new BatchCreateAuthorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateAuthorsRequest {
    return new BatchCreateAuthorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateAuthorsRequest {
    return new BatchCreateAuthorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateAuthorsRequest | PlainMessage<BatchCreateAuthorsRequest> | undefined, b: BatchCreateAuthorsRequest | PlainMessage<BatchCreateAuthorsRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateAuthorsRequest, a, b);
  }
}

/**
 * @generated from message api.BatchCreateAuthorsResponse
 */
export class BatchCreateAuthorsResponse extends Message<BatchCreateAuthorsResponse> {
  /**
   * @generated from field: repeated api.Author authors = 1;
   */
  authors: Author[] = [];

  constructor(data?: PartialMessage<BatchCreateAuthorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateAuthorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authors", kind: "message", T: Author, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateAuthorsResponse {
    return new BatchCreateAuthorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateAuthorsResponse {
    return new BatchCreateAuthorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateAuthorsResponse {
    return new BatchCreateAuthorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateAuthorsResponse | PlainMessage<BatchCreateAuthorsResponse> | undefined, b: BatchCreateAuthorsResponse | PlainMessage<BatchCreateAuthorsResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateAuthorsResponse, a, b);
  }
}

/**
 * @generated from message api.UpsertAuthorRequest
 */
export class UpsertAuthorRequest extends Message<UpsertAuthorRequest> {
  /**
   * @generated from field: api.Author author = 1;
   */
  author?: Author;

  constructor(data?: PartialMessage<UpsertAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpsertAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "author", kind: "message", T: Author },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertAuthorRequest {
    return new UpsertAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertAuthorRequest {
    return new UpsertAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertAuthorRequest {
    return new UpsertAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertAuthorRequest | PlainMessage<UpsertAuthorRequest> | undefined, b: UpsertAuthorRequest | PlainMessage<UpsertAuthorRequest> | undefined): boolean {
    return proto3.util.equals(UpsertAuthorRequest, a, b);
  }
}

/**
 * @generated from message api.SearchAuthorRequest
 */
export class SearchAuthorRequest extends Message<SearchAuthorRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: api.SearchAuthorRequest.View view = 2;
   */
  view = SearchAuthorRequest_View.BASIC;

  constructor(data?: PartialMessage<SearchAuthorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.SearchAuthorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(SearchAuthorRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchAuthorRequest {
    return new SearchAuthorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchAuthorRequest {
    return new SearchAuthorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchAuthorRequest {
    return new SearchAuthorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchAuthorRequest | PlainMessage<SearchAuthorRequest> | undefined, b: SearchAuthorRequest | PlainMessage<SearchAuthorRequest> | undefined): boolean {
    return proto3.util.equals(SearchAuthorRequest, a, b);
  }
}

/**
 * @generated from enum api.SearchAuthorRequest.View
 */
export enum SearchAuthorRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(SearchAuthorRequest_View)
proto3.util.setEnumType(SearchAuthorRequest_View, "api.SearchAuthorRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.Comic
 */
export class Comic extends Message<Comic> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: bytes author_id = 3;
   */
  authorId = new Uint8Array(0);

  /**
   * @generated from field: bytes magazine_id = 4;
   */
  magazineId = new Uint8Array(0);

  /**
   * @generated from field: api.Author author = 5;
   */
  author?: Author;

  /**
   * @generated from field: api.Magazine magazine = 6;
   */
  magazine?: Magazine;

  /**
   * @generated from field: repeated api.Tag tags = 7;
   */
  tags: Tag[] = [];

  /**
   * @generated from field: repeated api.Episode episodes = 8;
   */
  episodes: Episode[] = [];

  constructor(data?: PartialMessage<Comic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.Comic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "author_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "magazine_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "author", kind: "message", T: Author },
    { no: 6, name: "magazine", kind: "message", T: Magazine },
    { no: 7, name: "tags", kind: "message", T: Tag, repeated: true },
    { no: 8, name: "episodes", kind: "message", T: Episode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Comic {
    return new Comic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Comic {
    return new Comic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Comic {
    return new Comic().fromJsonString(jsonString, options);
  }

  static equals(a: Comic | PlainMessage<Comic> | undefined, b: Comic | PlainMessage<Comic> | undefined): boolean {
    return proto3.util.equals(Comic, a, b);
  }
}

/**
 * @generated from message api.CreateComicRequest
 */
export class CreateComicRequest extends Message<CreateComicRequest> {
  /**
   * @generated from field: api.Comic comic = 1;
   */
  comic?: Comic;

  constructor(data?: PartialMessage<CreateComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.CreateComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comic", kind: "message", T: Comic },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateComicRequest {
    return new CreateComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateComicRequest {
    return new CreateComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateComicRequest {
    return new CreateComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateComicRequest | PlainMessage<CreateComicRequest> | undefined, b: CreateComicRequest | PlainMessage<CreateComicRequest> | undefined): boolean {
    return proto3.util.equals(CreateComicRequest, a, b);
  }
}

/**
 * @generated from message api.GetComicRequest
 */
export class GetComicRequest extends Message<GetComicRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: api.GetComicRequest.View view = 2;
   */
  view = GetComicRequest_View.BASIC;

  constructor(data?: PartialMessage<GetComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.GetComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetComicRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetComicRequest {
    return new GetComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetComicRequest {
    return new GetComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetComicRequest {
    return new GetComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetComicRequest | PlainMessage<GetComicRequest> | undefined, b: GetComicRequest | PlainMessage<GetComicRequest> | undefined): boolean {
    return proto3.util.equals(GetComicRequest, a, b);
  }
}

/**
 * @generated from enum api.GetComicRequest.View
 */
export enum GetComicRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetComicRequest_View)
proto3.util.setEnumType(GetComicRequest_View, "api.GetComicRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.UpdateComicRequest
 */
export class UpdateComicRequest extends Message<UpdateComicRequest> {
  /**
   * @generated from field: api.Comic comic = 1;
   */
  comic?: Comic;

  constructor(data?: PartialMessage<UpdateComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpdateComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comic", kind: "message", T: Comic },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateComicRequest {
    return new UpdateComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateComicRequest {
    return new UpdateComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateComicRequest {
    return new UpdateComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateComicRequest | PlainMessage<UpdateComicRequest> | undefined, b: UpdateComicRequest | PlainMessage<UpdateComicRequest> | undefined): boolean {
    return proto3.util.equals(UpdateComicRequest, a, b);
  }
}

/**
 * @generated from message api.DeleteComicRequest
 */
export class DeleteComicRequest extends Message<DeleteComicRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.DeleteComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteComicRequest {
    return new DeleteComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteComicRequest {
    return new DeleteComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteComicRequest {
    return new DeleteComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteComicRequest | PlainMessage<DeleteComicRequest> | undefined, b: DeleteComicRequest | PlainMessage<DeleteComicRequest> | undefined): boolean {
    return proto3.util.equals(DeleteComicRequest, a, b);
  }
}

/**
 * @generated from message api.ListComicRequest
 */
export class ListComicRequest extends Message<ListComicRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: api.ListComicRequest.View view = 3;
   */
  view = ListComicRequest_View.BASIC;

  constructor(data?: PartialMessage<ListComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListComicRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListComicRequest {
    return new ListComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListComicRequest {
    return new ListComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListComicRequest {
    return new ListComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListComicRequest | PlainMessage<ListComicRequest> | undefined, b: ListComicRequest | PlainMessage<ListComicRequest> | undefined): boolean {
    return proto3.util.equals(ListComicRequest, a, b);
  }
}

/**
 * @generated from enum api.ListComicRequest.View
 */
export enum ListComicRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ListComicRequest_View)
proto3.util.setEnumType(ListComicRequest_View, "api.ListComicRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.ListComicResponse
 */
export class ListComicResponse extends Message<ListComicResponse> {
  /**
   * @generated from field: repeated api.Comic comic_list = 1;
   */
  comicList: Comic[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListComicResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListComicResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comic_list", kind: "message", T: Comic, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListComicResponse {
    return new ListComicResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListComicResponse {
    return new ListComicResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListComicResponse {
    return new ListComicResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListComicResponse | PlainMessage<ListComicResponse> | undefined, b: ListComicResponse | PlainMessage<ListComicResponse> | undefined): boolean {
    return proto3.util.equals(ListComicResponse, a, b);
  }
}

/**
 * @generated from message api.BatchCreateComicsRequest
 */
export class BatchCreateComicsRequest extends Message<BatchCreateComicsRequest> {
  /**
   * @generated from field: repeated api.CreateComicRequest requests = 1;
   */
  requests: CreateComicRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateComicsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateComicsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateComicRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateComicsRequest {
    return new BatchCreateComicsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateComicsRequest {
    return new BatchCreateComicsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateComicsRequest {
    return new BatchCreateComicsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateComicsRequest | PlainMessage<BatchCreateComicsRequest> | undefined, b: BatchCreateComicsRequest | PlainMessage<BatchCreateComicsRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateComicsRequest, a, b);
  }
}

/**
 * @generated from message api.BatchCreateComicsResponse
 */
export class BatchCreateComicsResponse extends Message<BatchCreateComicsResponse> {
  /**
   * @generated from field: repeated api.Comic comics = 1;
   */
  comics: Comic[] = [];

  constructor(data?: PartialMessage<BatchCreateComicsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateComicsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comics", kind: "message", T: Comic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateComicsResponse {
    return new BatchCreateComicsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateComicsResponse {
    return new BatchCreateComicsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateComicsResponse {
    return new BatchCreateComicsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateComicsResponse | PlainMessage<BatchCreateComicsResponse> | undefined, b: BatchCreateComicsResponse | PlainMessage<BatchCreateComicsResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateComicsResponse, a, b);
  }
}

/**
 * @generated from message api.UpsertComicRequest
 */
export class UpsertComicRequest extends Message<UpsertComicRequest> {
  /**
   * @generated from field: api.Comic comic = 1;
   */
  comic?: Comic;

  constructor(data?: PartialMessage<UpsertComicRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpsertComicRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "comic", kind: "message", T: Comic },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertComicRequest {
    return new UpsertComicRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertComicRequest {
    return new UpsertComicRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertComicRequest {
    return new UpsertComicRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertComicRequest | PlainMessage<UpsertComicRequest> | undefined, b: UpsertComicRequest | PlainMessage<UpsertComicRequest> | undefined): boolean {
    return proto3.util.equals(UpsertComicRequest, a, b);
  }
}

/**
 * @generated from message api.Episode
 */
export class Episode extends Message<Episode> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string Thumbnail = 4;
   */
  Thumbnail = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 5;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: bytes comic_id = 6;
   */
  comicId = new Uint8Array(0);

  /**
   * @generated from field: api.Comic comic = 7;
   */
  comic?: Comic;

  constructor(data?: PartialMessage<Episode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.Episode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Thumbnail", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "updated_at", kind: "message", T: Timestamp },
    { no: 6, name: "comic_id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 7, name: "comic", kind: "message", T: Comic },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Episode {
    return new Episode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Episode {
    return new Episode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Episode {
    return new Episode().fromJsonString(jsonString, options);
  }

  static equals(a: Episode | PlainMessage<Episode> | undefined, b: Episode | PlainMessage<Episode> | undefined): boolean {
    return proto3.util.equals(Episode, a, b);
  }
}

/**
 * @generated from message api.CreateEpisodeRequest
 */
export class CreateEpisodeRequest extends Message<CreateEpisodeRequest> {
  /**
   * @generated from field: api.Episode episode = 1;
   */
  episode?: Episode;

  constructor(data?: PartialMessage<CreateEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.CreateEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "episode", kind: "message", T: Episode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEpisodeRequest {
    return new CreateEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEpisodeRequest {
    return new CreateEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEpisodeRequest {
    return new CreateEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEpisodeRequest | PlainMessage<CreateEpisodeRequest> | undefined, b: CreateEpisodeRequest | PlainMessage<CreateEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(CreateEpisodeRequest, a, b);
  }
}

/**
 * @generated from message api.GetEpisodeRequest
 */
export class GetEpisodeRequest extends Message<GetEpisodeRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: api.GetEpisodeRequest.View view = 2;
   */
  view = GetEpisodeRequest_View.BASIC;

  constructor(data?: PartialMessage<GetEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.GetEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetEpisodeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEpisodeRequest {
    return new GetEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEpisodeRequest {
    return new GetEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEpisodeRequest {
    return new GetEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEpisodeRequest | PlainMessage<GetEpisodeRequest> | undefined, b: GetEpisodeRequest | PlainMessage<GetEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(GetEpisodeRequest, a, b);
  }
}

/**
 * @generated from enum api.GetEpisodeRequest.View
 */
export enum GetEpisodeRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetEpisodeRequest_View)
proto3.util.setEnumType(GetEpisodeRequest_View, "api.GetEpisodeRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.UpdateEpisodeRequest
 */
export class UpdateEpisodeRequest extends Message<UpdateEpisodeRequest> {
  /**
   * @generated from field: api.Episode episode = 1;
   */
  episode?: Episode;

  constructor(data?: PartialMessage<UpdateEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpdateEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "episode", kind: "message", T: Episode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEpisodeRequest {
    return new UpdateEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEpisodeRequest {
    return new UpdateEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEpisodeRequest {
    return new UpdateEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEpisodeRequest | PlainMessage<UpdateEpisodeRequest> | undefined, b: UpdateEpisodeRequest | PlainMessage<UpdateEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEpisodeRequest, a, b);
  }
}

/**
 * @generated from message api.DeleteEpisodeRequest
 */
export class DeleteEpisodeRequest extends Message<DeleteEpisodeRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.DeleteEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteEpisodeRequest {
    return new DeleteEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteEpisodeRequest {
    return new DeleteEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteEpisodeRequest {
    return new DeleteEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteEpisodeRequest | PlainMessage<DeleteEpisodeRequest> | undefined, b: DeleteEpisodeRequest | PlainMessage<DeleteEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(DeleteEpisodeRequest, a, b);
  }
}

/**
 * @generated from message api.ListEpisodeRequest
 */
export class ListEpisodeRequest extends Message<ListEpisodeRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: api.ListEpisodeRequest.View view = 3;
   */
  view = ListEpisodeRequest_View.BASIC;

  constructor(data?: PartialMessage<ListEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListEpisodeRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEpisodeRequest {
    return new ListEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEpisodeRequest {
    return new ListEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEpisodeRequest {
    return new ListEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEpisodeRequest | PlainMessage<ListEpisodeRequest> | undefined, b: ListEpisodeRequest | PlainMessage<ListEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(ListEpisodeRequest, a, b);
  }
}

/**
 * @generated from enum api.ListEpisodeRequest.View
 */
export enum ListEpisodeRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ListEpisodeRequest_View)
proto3.util.setEnumType(ListEpisodeRequest_View, "api.ListEpisodeRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.ListEpisodeResponse
 */
export class ListEpisodeResponse extends Message<ListEpisodeResponse> {
  /**
   * @generated from field: repeated api.Episode episode_list = 1;
   */
  episodeList: Episode[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListEpisodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListEpisodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "episode_list", kind: "message", T: Episode, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEpisodeResponse {
    return new ListEpisodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEpisodeResponse {
    return new ListEpisodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEpisodeResponse {
    return new ListEpisodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEpisodeResponse | PlainMessage<ListEpisodeResponse> | undefined, b: ListEpisodeResponse | PlainMessage<ListEpisodeResponse> | undefined): boolean {
    return proto3.util.equals(ListEpisodeResponse, a, b);
  }
}

/**
 * @generated from message api.BatchCreateEpisodesRequest
 */
export class BatchCreateEpisodesRequest extends Message<BatchCreateEpisodesRequest> {
  /**
   * @generated from field: repeated api.CreateEpisodeRequest requests = 1;
   */
  requests: CreateEpisodeRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateEpisodesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateEpisodesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateEpisodeRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateEpisodesRequest {
    return new BatchCreateEpisodesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateEpisodesRequest {
    return new BatchCreateEpisodesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateEpisodesRequest {
    return new BatchCreateEpisodesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateEpisodesRequest | PlainMessage<BatchCreateEpisodesRequest> | undefined, b: BatchCreateEpisodesRequest | PlainMessage<BatchCreateEpisodesRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateEpisodesRequest, a, b);
  }
}

/**
 * @generated from message api.BatchCreateEpisodesResponse
 */
export class BatchCreateEpisodesResponse extends Message<BatchCreateEpisodesResponse> {
  /**
   * @generated from field: repeated api.Episode episodes = 1;
   */
  episodes: Episode[] = [];

  constructor(data?: PartialMessage<BatchCreateEpisodesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateEpisodesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "episodes", kind: "message", T: Episode, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateEpisodesResponse {
    return new BatchCreateEpisodesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateEpisodesResponse {
    return new BatchCreateEpisodesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateEpisodesResponse {
    return new BatchCreateEpisodesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateEpisodesResponse | PlainMessage<BatchCreateEpisodesResponse> | undefined, b: BatchCreateEpisodesResponse | PlainMessage<BatchCreateEpisodesResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateEpisodesResponse, a, b);
  }
}

/**
 * @generated from message api.UpsertEpisodeRequest
 */
export class UpsertEpisodeRequest extends Message<UpsertEpisodeRequest> {
  /**
   * @generated from field: api.Episode episode = 1;
   */
  episode?: Episode;

  constructor(data?: PartialMessage<UpsertEpisodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpsertEpisodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "episode", kind: "message", T: Episode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertEpisodeRequest {
    return new UpsertEpisodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertEpisodeRequest {
    return new UpsertEpisodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertEpisodeRequest {
    return new UpsertEpisodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertEpisodeRequest | PlainMessage<UpsertEpisodeRequest> | undefined, b: UpsertEpisodeRequest | PlainMessage<UpsertEpisodeRequest> | undefined): boolean {
    return proto3.util.equals(UpsertEpisodeRequest, a, b);
  }
}

/**
 * @generated from message api.Magazine
 */
export class Magazine extends Message<Magazine> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated api.Comic comics = 3;
   */
  comics: Comic[] = [];

  constructor(data?: PartialMessage<Magazine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.Magazine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comics", kind: "message", T: Comic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Magazine {
    return new Magazine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Magazine {
    return new Magazine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Magazine {
    return new Magazine().fromJsonString(jsonString, options);
  }

  static equals(a: Magazine | PlainMessage<Magazine> | undefined, b: Magazine | PlainMessage<Magazine> | undefined): boolean {
    return proto3.util.equals(Magazine, a, b);
  }
}

/**
 * @generated from message api.CreateMagazineRequest
 */
export class CreateMagazineRequest extends Message<CreateMagazineRequest> {
  /**
   * @generated from field: api.Magazine magazine = 1;
   */
  magazine?: Magazine;

  constructor(data?: PartialMessage<CreateMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.CreateMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "magazine", kind: "message", T: Magazine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMagazineRequest {
    return new CreateMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMagazineRequest {
    return new CreateMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMagazineRequest {
    return new CreateMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMagazineRequest | PlainMessage<CreateMagazineRequest> | undefined, b: CreateMagazineRequest | PlainMessage<CreateMagazineRequest> | undefined): boolean {
    return proto3.util.equals(CreateMagazineRequest, a, b);
  }
}

/**
 * @generated from message api.GetMagazineRequest
 */
export class GetMagazineRequest extends Message<GetMagazineRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: api.GetMagazineRequest.View view = 2;
   */
  view = GetMagazineRequest_View.BASIC;

  constructor(data?: PartialMessage<GetMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.GetMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetMagazineRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMagazineRequest {
    return new GetMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMagazineRequest {
    return new GetMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMagazineRequest {
    return new GetMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMagazineRequest | PlainMessage<GetMagazineRequest> | undefined, b: GetMagazineRequest | PlainMessage<GetMagazineRequest> | undefined): boolean {
    return proto3.util.equals(GetMagazineRequest, a, b);
  }
}

/**
 * @generated from enum api.GetMagazineRequest.View
 */
export enum GetMagazineRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetMagazineRequest_View)
proto3.util.setEnumType(GetMagazineRequest_View, "api.GetMagazineRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.UpdateMagazineRequest
 */
export class UpdateMagazineRequest extends Message<UpdateMagazineRequest> {
  /**
   * @generated from field: api.Magazine magazine = 1;
   */
  magazine?: Magazine;

  constructor(data?: PartialMessage<UpdateMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpdateMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "magazine", kind: "message", T: Magazine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateMagazineRequest {
    return new UpdateMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateMagazineRequest {
    return new UpdateMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateMagazineRequest {
    return new UpdateMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateMagazineRequest | PlainMessage<UpdateMagazineRequest> | undefined, b: UpdateMagazineRequest | PlainMessage<UpdateMagazineRequest> | undefined): boolean {
    return proto3.util.equals(UpdateMagazineRequest, a, b);
  }
}

/**
 * @generated from message api.DeleteMagazineRequest
 */
export class DeleteMagazineRequest extends Message<DeleteMagazineRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.DeleteMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMagazineRequest {
    return new DeleteMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMagazineRequest {
    return new DeleteMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMagazineRequest {
    return new DeleteMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMagazineRequest | PlainMessage<DeleteMagazineRequest> | undefined, b: DeleteMagazineRequest | PlainMessage<DeleteMagazineRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMagazineRequest, a, b);
  }
}

/**
 * @generated from message api.ListMagazineRequest
 */
export class ListMagazineRequest extends Message<ListMagazineRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: api.ListMagazineRequest.View view = 3;
   */
  view = ListMagazineRequest_View.BASIC;

  constructor(data?: PartialMessage<ListMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListMagazineRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMagazineRequest {
    return new ListMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMagazineRequest {
    return new ListMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMagazineRequest {
    return new ListMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMagazineRequest | PlainMessage<ListMagazineRequest> | undefined, b: ListMagazineRequest | PlainMessage<ListMagazineRequest> | undefined): boolean {
    return proto3.util.equals(ListMagazineRequest, a, b);
  }
}

/**
 * @generated from enum api.ListMagazineRequest.View
 */
export enum ListMagazineRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ListMagazineRequest_View)
proto3.util.setEnumType(ListMagazineRequest_View, "api.ListMagazineRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.ListMagazineResponse
 */
export class ListMagazineResponse extends Message<ListMagazineResponse> {
  /**
   * @generated from field: repeated api.Magazine magazine_list = 1;
   */
  magazineList: Magazine[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListMagazineResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListMagazineResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "magazine_list", kind: "message", T: Magazine, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMagazineResponse {
    return new ListMagazineResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMagazineResponse {
    return new ListMagazineResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMagazineResponse {
    return new ListMagazineResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMagazineResponse | PlainMessage<ListMagazineResponse> | undefined, b: ListMagazineResponse | PlainMessage<ListMagazineResponse> | undefined): boolean {
    return proto3.util.equals(ListMagazineResponse, a, b);
  }
}

/**
 * @generated from message api.BatchCreateMagazinesRequest
 */
export class BatchCreateMagazinesRequest extends Message<BatchCreateMagazinesRequest> {
  /**
   * @generated from field: repeated api.CreateMagazineRequest requests = 1;
   */
  requests: CreateMagazineRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateMagazinesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateMagazinesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateMagazineRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateMagazinesRequest {
    return new BatchCreateMagazinesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateMagazinesRequest {
    return new BatchCreateMagazinesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateMagazinesRequest {
    return new BatchCreateMagazinesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateMagazinesRequest | PlainMessage<BatchCreateMagazinesRequest> | undefined, b: BatchCreateMagazinesRequest | PlainMessage<BatchCreateMagazinesRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateMagazinesRequest, a, b);
  }
}

/**
 * @generated from message api.BatchCreateMagazinesResponse
 */
export class BatchCreateMagazinesResponse extends Message<BatchCreateMagazinesResponse> {
  /**
   * @generated from field: repeated api.Magazine magazines = 1;
   */
  magazines: Magazine[] = [];

  constructor(data?: PartialMessage<BatchCreateMagazinesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateMagazinesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "magazines", kind: "message", T: Magazine, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateMagazinesResponse {
    return new BatchCreateMagazinesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateMagazinesResponse {
    return new BatchCreateMagazinesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateMagazinesResponse {
    return new BatchCreateMagazinesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateMagazinesResponse | PlainMessage<BatchCreateMagazinesResponse> | undefined, b: BatchCreateMagazinesResponse | PlainMessage<BatchCreateMagazinesResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateMagazinesResponse, a, b);
  }
}

/**
 * @generated from message api.UpsertMagazineRequest
 */
export class UpsertMagazineRequest extends Message<UpsertMagazineRequest> {
  /**
   * @generated from field: api.Magazine magazine = 1;
   */
  magazine?: Magazine;

  constructor(data?: PartialMessage<UpsertMagazineRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpsertMagazineRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "magazine", kind: "message", T: Magazine },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertMagazineRequest {
    return new UpsertMagazineRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertMagazineRequest {
    return new UpsertMagazineRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertMagazineRequest {
    return new UpsertMagazineRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertMagazineRequest | PlainMessage<UpsertMagazineRequest> | undefined, b: UpsertMagazineRequest | PlainMessage<UpsertMagazineRequest> | undefined): boolean {
    return proto3.util.equals(UpsertMagazineRequest, a, b);
  }
}

/**
 * @generated from message api.Tag
 */
export class Tag extends Message<Tag> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: repeated api.Comic comics = 3;
   */
  comics: Comic[] = [];

  constructor(data?: PartialMessage<Tag>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.Tag";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "comics", kind: "message", T: Comic, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tag {
    return new Tag().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tag {
    return new Tag().fromJsonString(jsonString, options);
  }

  static equals(a: Tag | PlainMessage<Tag> | undefined, b: Tag | PlainMessage<Tag> | undefined): boolean {
    return proto3.util.equals(Tag, a, b);
  }
}

/**
 * @generated from message api.CreateTagRequest
 */
export class CreateTagRequest extends Message<CreateTagRequest> {
  /**
   * @generated from field: api.Tag tag = 1;
   */
  tag?: Tag;

  constructor(data?: PartialMessage<CreateTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.CreateTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "message", T: Tag },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTagRequest {
    return new CreateTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTagRequest {
    return new CreateTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTagRequest {
    return new CreateTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTagRequest | PlainMessage<CreateTagRequest> | undefined, b: CreateTagRequest | PlainMessage<CreateTagRequest> | undefined): boolean {
    return proto3.util.equals(CreateTagRequest, a, b);
  }
}

/**
 * @generated from message api.GetTagRequest
 */
export class GetTagRequest extends Message<GetTagRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  /**
   * @generated from field: api.GetTagRequest.View view = 2;
   */
  view = GetTagRequest_View.BASIC;

  constructor(data?: PartialMessage<GetTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.GetTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "view", kind: "enum", T: proto3.getEnumType(GetTagRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTagRequest {
    return new GetTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTagRequest {
    return new GetTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTagRequest {
    return new GetTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTagRequest | PlainMessage<GetTagRequest> | undefined, b: GetTagRequest | PlainMessage<GetTagRequest> | undefined): boolean {
    return proto3.util.equals(GetTagRequest, a, b);
  }
}

/**
 * @generated from enum api.GetTagRequest.View
 */
export enum GetTagRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GetTagRequest_View)
proto3.util.setEnumType(GetTagRequest_View, "api.GetTagRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.UpdateTagRequest
 */
export class UpdateTagRequest extends Message<UpdateTagRequest> {
  /**
   * @generated from field: api.Tag tag = 1;
   */
  tag?: Tag;

  constructor(data?: PartialMessage<UpdateTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.UpdateTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag", kind: "message", T: Tag },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTagRequest {
    return new UpdateTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTagRequest {
    return new UpdateTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTagRequest {
    return new UpdateTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTagRequest | PlainMessage<UpdateTagRequest> | undefined, b: UpdateTagRequest | PlainMessage<UpdateTagRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTagRequest, a, b);
  }
}

/**
 * @generated from message api.DeleteTagRequest
 */
export class DeleteTagRequest extends Message<DeleteTagRequest> {
  /**
   * @generated from field: bytes id = 1;
   */
  id = new Uint8Array(0);

  constructor(data?: PartialMessage<DeleteTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.DeleteTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTagRequest {
    return new DeleteTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTagRequest {
    return new DeleteTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTagRequest {
    return new DeleteTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTagRequest | PlainMessage<DeleteTagRequest> | undefined, b: DeleteTagRequest | PlainMessage<DeleteTagRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTagRequest, a, b);
  }
}

/**
 * @generated from message api.ListTagRequest
 */
export class ListTagRequest extends Message<ListTagRequest> {
  /**
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * @generated from field: api.ListTagRequest.View view = 3;
   */
  view = ListTagRequest_View.BASIC;

  constructor(data?: PartialMessage<ListTagRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListTagRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "view", kind: "enum", T: proto3.getEnumType(ListTagRequest_View) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagRequest {
    return new ListTagRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagRequest {
    return new ListTagRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagRequest {
    return new ListTagRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagRequest | PlainMessage<ListTagRequest> | undefined, b: ListTagRequest | PlainMessage<ListTagRequest> | undefined): boolean {
    return proto3.util.equals(ListTagRequest, a, b);
  }
}

/**
 * @generated from enum api.ListTagRequest.View
 */
export enum ListTagRequest_View {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: WITH_EDGES = 1;
   */
  WITH_EDGES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(ListTagRequest_View)
proto3.util.setEnumType(ListTagRequest_View, "api.ListTagRequest.View", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "WITH_EDGES" },
]);

/**
 * @generated from message api.ListTagResponse
 */
export class ListTagResponse extends Message<ListTagResponse> {
  /**
   * @generated from field: repeated api.Tag tag_list = 1;
   */
  tagList: Tag[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListTagResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.ListTagResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tag_list", kind: "message", T: Tag, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTagResponse {
    return new ListTagResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTagResponse {
    return new ListTagResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTagResponse {
    return new ListTagResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTagResponse | PlainMessage<ListTagResponse> | undefined, b: ListTagResponse | PlainMessage<ListTagResponse> | undefined): boolean {
    return proto3.util.equals(ListTagResponse, a, b);
  }
}

/**
 * @generated from message api.BatchCreateTagsRequest
 */
export class BatchCreateTagsRequest extends Message<BatchCreateTagsRequest> {
  /**
   * @generated from field: repeated api.CreateTagRequest requests = 1;
   */
  requests: CreateTagRequest[] = [];

  constructor(data?: PartialMessage<BatchCreateTagsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateTagsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "requests", kind: "message", T: CreateTagRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateTagsRequest {
    return new BatchCreateTagsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateTagsRequest {
    return new BatchCreateTagsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateTagsRequest {
    return new BatchCreateTagsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateTagsRequest | PlainMessage<BatchCreateTagsRequest> | undefined, b: BatchCreateTagsRequest | PlainMessage<BatchCreateTagsRequest> | undefined): boolean {
    return proto3.util.equals(BatchCreateTagsRequest, a, b);
  }
}

/**
 * @generated from message api.BatchCreateTagsResponse
 */
export class BatchCreateTagsResponse extends Message<BatchCreateTagsResponse> {
  /**
   * @generated from field: repeated api.Tag tags = 1;
   */
  tags: Tag[] = [];

  constructor(data?: PartialMessage<BatchCreateTagsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "api.BatchCreateTagsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "message", T: Tag, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchCreateTagsResponse {
    return new BatchCreateTagsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchCreateTagsResponse {
    return new BatchCreateTagsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchCreateTagsResponse {
    return new BatchCreateTagsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchCreateTagsResponse | PlainMessage<BatchCreateTagsResponse> | undefined, b: BatchCreateTagsResponse | PlainMessage<BatchCreateTagsResponse> | undefined): boolean {
    return proto3.util.equals(BatchCreateTagsResponse, a, b);
  }
}

